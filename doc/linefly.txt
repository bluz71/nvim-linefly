*linefly* A simple, fast and informative pure-Lua statusline for Neovim.

OPTIONS                                                       *linefly-options*

Default option values:
>
  vim.g.linefly_options = {
    separator_symbol = "⎪",
    progress_symbol = "↓",
    active_tab_symbol = "▪",
    git_branch_symbol = "",
    error_symbol = "E",
    warning_symbol = "W",
    information_symbol = "I",
    tabline = false,
    winbar = false,
    with_file_icon = true,
    with_git_branch = true,
    with_git_status = true,
    with_diagnostic_status = true,
    with_macro_status = true,
    with_session_status = true,
    with_indent_status = false,
  }
<
------------------------------------------------------------------------------
separator_symbol~                                           *separator_symbol*

The `separator_symbol` option specifies which character symbol to use for
segment separators in the `statusline`.

By default, the `⎪` character (Unicode `U+23AA`) will be displayed.

To specify your own separator symbol please add the following to your
initialization file:
>
  vim.g.linefly_options = {
    separator_symbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
  }
<
------------------------------------------------------------------------------
progress_symbol~                                             *progress_symbol*

The `progress_symbol` option specifies which character symbol to use to
indicate location-as-percentage in the `statusline`.

By default, the `↓` character (Unicode `U+2193`) will be displayed.

To specify your own progress symbol, or no symbol at all, please add the
following to your initialization file:
>
  vim.g.linefly_options = {
    progress_symbol = '<<SYMBOL-OF-YOUR-CHOOSING-OR-EMPTY>>'
  }
<
------------------------------------------------------------------------------
active_tab_symbol~                                         *active_tab_symbol*

The `active_tab_symbol` option specifies which character symbol to use to
signify the active tab in the `tabline`.

By default, the `▪` character (Unicode `U+25AA`) will be displayed.

To specify your own active tab symbol please add the following to your
initialization file:
>
  vim.g.linefly_options = {
    active_tab_symbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
  }
<
------------------------------------------------------------------------------
git_branch_symbol~                                         *git_branch_symbol*

The `git_branch_symbol` option specifies which character symbol to use to
signify the active tab in the `tabline`.

By default, the `` character (Powerline `U+E0A0`) will be displayed. Many
modern monospace fonts will contain that character.

To specify your own Git branch symbol, or no symbol at all, please add the
following to your initialization file:
>
  vim.g.linefly_options = {
    git_branch_symbol = '<<SYMBOL-OF-YOUR-CHOOSING-OR-EMPTY>>'
  }
<
------------------------------------------------------------------------------
error_symbol~                                                   *error_symbol*

The `error_symbol` option specifies which character symbol to use when
displaying Diagnostic (https://neovim.io/doc/user/diagnostic.html) errors.

By default, the `E` character will be displayed.

To specify your own error symbol please add the following to your initialization
file:
>
  vim.g.linefly_options = {
    error_symbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
  }
<
------------------------------------------------------------------------------
warning_symbol~                                               *warning_symbol*

The `warning_symbol` option specifies which character symbol to use when
displaying Diagnostic (https://neovim.io/doc/user/diagnostic.html) warnings.

By default, the `W` character will be displayed.

To specify your own warning symbol please add the following to your
initialization file:
>
  vim.g.linefly_options = {
    warning_symbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
  }
<
------------------------------------------------------------------------------
information_symbol~                                       *information_symbol*

The `information_symbol` option specifies which character symbol to use
when displaying Diagnostic (https://neovim.io/doc/user/diagnostic.html)
information.

By default, the `I` character will be displayed.

To specify your own information symbol please add the following to your
initialization file:
>
  vim.g.linefly_options = {
    information_symbol = '<<SYMBOL-OF-YOUR-CHOOSING>>'
  }
<
------------------------------------------------------------------------------
tabline~                                                             *tabline*

The `tabline` option specifies whether to let this plugin manage the Neovim
`tabline` in addition to the `statusline`. By default Neovim `tabline`
management will not be undertaken.

If enabled, `linefly` will render a simple numbered, and clickable,
window-space layout in the `tabline`; note, no buffers will be displayed in
the `tabline` since there are many plugins that already provide that
capability.

To enable `tabline` support please add the following to your initialization
file:
>
  vim.g.linefly_options = {
    tabline = true,
  }
<
------------------------------------------------------------------------------
winbar~                                                               *winbar*

The `winbar` option specifies whether to display a window bar at the top of each
window. By default window bars will not be displayed.

Displaying a window bar is recommended when the global statusline is enabled via
`set laststatus=3`; the `winbar` will then display the file name at the top of
each window to disambiguate splits. Also, if there only one window in the
current tab then a `winbar` will not be displayed (it won't be needed).

To enable the `winbar` feature please add the following to your initialization
file:
>
  vim.g.linefly_options = {
    winbar = true,
  }
<
------------------------------------------------------------------------------
with_file_icon~                                               *with_file_icon*

The `with_file_icon` option specifies whether a filetype icon, from a Nerd
Font, will be displayed prior to the filename in the `statusline` (and optional
`winbar`).

Note, a Nerd Font (https://www.nerdfonts.com) must be active and the
nvim-web-devicons (https://github.com/kyazdani42/nvim-web-devicons) plugin
must also be installed and active.

By default a filetype icon will be displayed if possible.

To disable the display of a filetype icon please add the following to your
initialization file:
>
  vim.g.linefly_options = {
    with_file_icon = false,
  }
<
------------------------------------------------------------------------------
with_git_branch~                                             *with_git_branch*

The `with_git_branch` option specifies whether to display Git branch
details in the `statusline`. By default Git branches will be displayed in the
`statusline`.

To disable the display of Git branches in the `statusline` please add the
following to your initialization file:
>
  vim.g.linefly_options = {
    with_git_branch = false,
  }
<
------------------------------------------------------------------------------
with_git_status~                                             *with_git_status*

The `with_git_status` option specifies whether to display
Gitsigns (https://github.com/lewis6991/gitsigns.nvim) of the current buffer in
the `statusline`.

By default, the Git status will be displayed if the plugin is loaded.

To disable the display of Git status in the `statusline` please add the
following to your initialization file:
>
  vim.g.linefly_options = {
    with_git_status = false,
  }
<
------------------------------------------------------------------------------
with_diagnostic_status~                               *with_diagnostic_status*

The `with_diagnostic_status` option specifies whether to indicate the presence
of the diagnostics in the current buffer.

By default, diagnositics will be displayed if the nvim-lspconfig
(https://github.com/neovim/nvim-lspconfig) plugin is loaded.

If diagnostic display is not wanted then please add the following to your
initialization file:
>
  vim.g.linefly_options = {
    with_diagnostic_status = false,
  }
<
------------------------------------------------------------------------------
with_macro_status~                                         *with_macro_status*

The `with_macro_status` option specifies whether to display macro-recording
status in the `statusline`.

By default, macro-recording status will not be displayed.

To enable the display of macro-recording status in the `statusline` please add
the following to your initialization file:
>
  vim.g.linefly_options = {
    with_macro_status = true,
  }
<
------------------------------------------------------------------------------
with_session_status~                                     *with_session_status*

The `with_session_status` option specifies whether to display
vim-obsession (https://github.com/tpope/vim-obsession), possession.nvim
(https://github.com/jedrzejboczar/possession.nvim) or nvim-possession
(https://github.com/gennaro-tedesco/nvim-possession) session details in the
`statusline`.

By default, session details will be displayed if one of those plugins is loaded.

To disable the display of session details in the `statusline` please add the
following to your initialization file:

>
  vim.g.linefly_options = {
    with_session_status = false,
  }
<
------------------------------------------------------------------------------
with_indent_status~                                       *with_indent_status*

The `with_indent_status` option specifies whether to display the indentation
status as the last component in the statusline. By default indentation status
will not be displayed.

Note, if the `expandtab` option is set, for the current buffer, then tab stop
will be displayed, for example `Tab:4` (tab equals four spaces); if on the
other hand `noexpandtab` option is set then shift width will be displayed
instead, for example `Spc:2` ('spc' short for 'space').

To enable indentation status please add the following to your initialization
file:
>
  vim.g.linefly_options = {
    with_indent_status = true,
  }
<

vim:tw=78:ts=8:noet:ft=help:norl:
